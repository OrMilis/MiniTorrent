//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MiniTorrent.ServerService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServerService.IMediationServer")]
    public interface IMediationServer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServer/SignIn", ReplyAction="http://tempuri.org/IMediationServer/SignInResponse")]
        bool SignIn(string userDataString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServer/SignIn", ReplyAction="http://tempuri.org/IMediationServer/SignInResponse")]
        System.Threading.Tasks.Task<bool> SignInAsync(string userDataString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServer/SignOut", ReplyAction="http://tempuri.org/IMediationServer/SignOutResponse")]
        bool SignOut(string userDataString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServer/SignOut", ReplyAction="http://tempuri.org/IMediationServer/SignOutResponse")]
        System.Threading.Tasks.Task<bool> SignOutAsync(string userDataString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServer/RequestFiles", ReplyAction="http://tempuri.org/IMediationServer/RequestFilesResponse")]
        string RequestFiles(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServer/RequestFiles", ReplyAction="http://tempuri.org/IMediationServer/RequestFilesResponse")]
        System.Threading.Tasks.Task<string> RequestFilesAsync(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServer/getAllFiles", ReplyAction="http://tempuri.org/IMediationServer/getAllFilesResponse")]
        string getAllFiles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServer/getAllFiles", ReplyAction="http://tempuri.org/IMediationServer/getAllFilesResponse")]
        System.Threading.Tasks.Task<string> getAllFilesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServer/getAllActiveUsers", ReplyAction="http://tempuri.org/IMediationServer/getAllActiveUsersResponse")]
        string getAllActiveUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServer/getAllActiveUsers", ReplyAction="http://tempuri.org/IMediationServer/getAllActiveUsersResponse")]
        System.Threading.Tasks.Task<string> getAllActiveUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServer/SignUp", ReplyAction="http://tempuri.org/IMediationServer/SignUpResponse")]
        bool SignUp(string userDataString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServer/SignUp", ReplyAction="http://tempuri.org/IMediationServer/SignUpResponse")]
        System.Threading.Tasks.Task<bool> SignUpAsync(string userDataString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServer/SearchUser", ReplyAction="http://tempuri.org/IMediationServer/SearchUserResponse")]
        string SearchUser(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServer/SearchUser", ReplyAction="http://tempuri.org/IMediationServer/SearchUserResponse")]
        System.Threading.Tasks.Task<string> SearchUserAsync(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServer/setUsers", ReplyAction="http://tempuri.org/IMediationServer/setUsersResponse")]
        void setUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServer/setUsers", ReplyAction="http://tempuri.org/IMediationServer/setUsersResponse")]
        System.Threading.Tasks.Task setUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServer/deleteUser", ReplyAction="http://tempuri.org/IMediationServer/deleteUserResponse")]
        bool deleteUser(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServer/deleteUser", ReplyAction="http://tempuri.org/IMediationServer/deleteUserResponse")]
        System.Threading.Tasks.Task<bool> deleteUserAsync(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServer/UpdateUser", ReplyAction="http://tempuri.org/IMediationServer/UpdateUserResponse")]
        bool UpdateUser(ClassLibrary.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServer/UpdateUser", ReplyAction="http://tempuri.org/IMediationServer/UpdateUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserAsync(ClassLibrary.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServer/GetAllUsers", ReplyAction="http://tempuri.org/IMediationServer/GetAllUsersResponse")]
        string GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServer/GetAllUsers", ReplyAction="http://tempuri.org/IMediationServer/GetAllUsersResponse")]
        System.Threading.Tasks.Task<string> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServer/resetAllActiveUsersAndActiveUsers", ReplyAction="http://tempuri.org/IMediationServer/resetAllActiveUsersAndActiveUsersResponse")]
        void resetAllActiveUsersAndActiveUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediationServer/resetAllActiveUsersAndActiveUsers", ReplyAction="http://tempuri.org/IMediationServer/resetAllActiveUsersAndActiveUsersResponse")]
        System.Threading.Tasks.Task resetAllActiveUsersAndActiveUsersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMediationServerChannel : MiniTorrent.ServerService.IMediationServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MediationServerClient : System.ServiceModel.ClientBase<MiniTorrent.ServerService.IMediationServer>, MiniTorrent.ServerService.IMediationServer {
        
        public MediationServerClient() {
        }
        
        public MediationServerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MediationServerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MediationServerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MediationServerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool SignIn(string userDataString) {
            return base.Channel.SignIn(userDataString);
        }
        
        public System.Threading.Tasks.Task<bool> SignInAsync(string userDataString) {
            return base.Channel.SignInAsync(userDataString);
        }
        
        public bool SignOut(string userDataString) {
            return base.Channel.SignOut(userDataString);
        }
        
        public System.Threading.Tasks.Task<bool> SignOutAsync(string userDataString) {
            return base.Channel.SignOutAsync(userDataString);
        }
        
        public string RequestFiles(string fileName) {
            return base.Channel.RequestFiles(fileName);
        }
        
        public System.Threading.Tasks.Task<string> RequestFilesAsync(string fileName) {
            return base.Channel.RequestFilesAsync(fileName);
        }
        
        public string getAllFiles() {
            return base.Channel.getAllFiles();
        }
        
        public System.Threading.Tasks.Task<string> getAllFilesAsync() {
            return base.Channel.getAllFilesAsync();
        }
        
        public string getAllActiveUsers() {
            return base.Channel.getAllActiveUsers();
        }
        
        public System.Threading.Tasks.Task<string> getAllActiveUsersAsync() {
            return base.Channel.getAllActiveUsersAsync();
        }
        
        public bool SignUp(string userDataString) {
            return base.Channel.SignUp(userDataString);
        }
        
        public System.Threading.Tasks.Task<bool> SignUpAsync(string userDataString) {
            return base.Channel.SignUpAsync(userDataString);
        }
        
        public string SearchUser(string user) {
            return base.Channel.SearchUser(user);
        }
        
        public System.Threading.Tasks.Task<string> SearchUserAsync(string user) {
            return base.Channel.SearchUserAsync(user);
        }
        
        public void setUsers() {
            base.Channel.setUsers();
        }
        
        public System.Threading.Tasks.Task setUsersAsync() {
            return base.Channel.setUsersAsync();
        }
        
        public bool deleteUser(string user) {
            return base.Channel.deleteUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> deleteUserAsync(string user) {
            return base.Channel.deleteUserAsync(user);
        }
        
        public bool UpdateUser(ClassLibrary.User user) {
            return base.Channel.UpdateUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserAsync(ClassLibrary.User user) {
            return base.Channel.UpdateUserAsync(user);
        }
        
        public string GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<string> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public void resetAllActiveUsersAndActiveUsers() {
            base.Channel.resetAllActiveUsersAndActiveUsers();
        }
        
        public System.Threading.Tasks.Task resetAllActiveUsersAndActiveUsersAsync() {
            return base.Channel.resetAllActiveUsersAndActiveUsersAsync();
        }
    }
}
